generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
  output        = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model KoboServer {
  id       String     @id @default(uuid())
  url      String
  urlV1    String?
  token    String
  KoboForm KoboForm[]
}

model KoboForm {
  id                 String               @id @default(uuid())
  name               String
  serverId           String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime?
  uploadedBy         String?
  updatedBy          String?
  deploymentStatus   String?
  enketoUrl          String?
  submissionsCount   Int?
  KoboAnswers        KoboAnswers[]
  KoboAnswersHistory KoboAnswersHistory[]
  server             KoboServer           @relation(fields: [serverId], references: [id])
}

model KoboAnswers {
  id                     String                    @id
  start                  DateTime
  end                    DateTime
  version                String?
  geolocation            String?
  answers                Json
  submissionTime         DateTime
  formId                 String
  validationStatus       String?
  lastValidatedTimestamp Int?
  validatedBy            String?
  attachments            Json[]
  deletedAt              DateTime?
  deletedBy              String?
  source                 String?
  tags                   Json?
  uuid                   String
  date                   DateTime
  updatedAt              DateTime?
  form                   KoboForm                  @relation(fields: [formId], references: [id])
  mealVerifications      MealVerificationAnswers[]
  histories              KoboAnswersHistory[]      @relation("KoboAnswersToHistory")

  @@unique([id, formId])
  @@index([deletedAt])
  @@index([date])
  @@index([formId])
}

model KoboAnswersHistory {
  id       String        @id @default(uuid())
  answerId String?
  by       String
  date     DateTime      @default(now())
  type     String?
  property String?
  newValue Json?
  formId   String?
  oldValue Json?
  form     KoboForm?     @relation(fields: [formId], references: [id])
  answers  KoboAnswers[] @relation("KoboAnswersToHistory")

  @@index([formId])
}

model KoboPerson {
  id           String   @id @default(uuid())
  age          Int?
  gender       Gender?
  disability   String[]
  displacement String?
  metaId       String
  meta         KoboMeta @relation(fields: [metaId], references: [id], onDelete: Cascade)

  @@index([metaId])
}

model KoboMeta {
  id               String       @id @default(uuid())
  uuid             String
  formId           String
  referencedFormId String?
  date             DateTime
  updatedAt        DateTime?
  oblast           String?
  raion            String?
  hromada          String?
  settlement       String?
  personsCount     Int?
  enumerator       String?
  taxId            String?
  firstName        String?
  lastName         String?
  patronymicName   String?
  phone            String?
  activity         String?
  sector           String?
  office           String?
  project          String[]
  donor            String[]
  address          String?
  status           String?
  displacement     String?
  lastStatusUpdate DateTime?
  tags             Json?
  koboId           String
  passportNum      String?
  idFileName       String?
  taxIdFileName    String?
  idFileId         Int?
  taxIdFileId      Int?
  modality         Modality?
  persons          KoboPerson[]

  @@index([formId])
  @@index([koboId])
}

model User {
  id              String         @id @default(uuid())
  email           String         @unique
  createdAt       DateTime       @default(now())
  lastConnectedAt DateTime?
  admin           Boolean        @default(false)
  officer         String?
  drcOffice       String?
  drcJob          String?
  createdBy       String?
  accessToken     String?
  name            String?
  avatar          Bytes?
  activities      UserActivity[]

  @@index([email])
}

model UserActivity {
  id     String   @id @default(uuid())
  at     DateTime @default(now())
  detail String?
  userId String?
  user   User?    @relation(fields: [userId], references: [id])
}

model MpcaWfpDeduplicationIdMapping {
  beneficiaryId String                 @id
  taxId         String?                @unique
  deduplication MpcaWfpDeduplication[]

  @@unique([beneficiaryId, taxId])
}

model MpcaWfpDeduplication {
  id             String                        @id @default(uuid())
  amount         Int
  wfpId          Int
  createdAt      DateTime
  expiry         DateTime
  beneficiaryId  String
  message        String?
  status         String
  validFrom      DateTime
  existingOrga   String?
  existingStart  DateTime?
  existingEnd    DateTime?
  existingAmount Int?
  office         String?
  fileName       String?
  fileUpload     DateTime?
  category       String?
  beneficiary    MpcaWfpDeduplicationIdMapping @relation(fields: [beneficiaryId], references: [beneficiaryId])
}

model FeatureAccess {
  id          String             @id @default(uuid())
  featureId   String?
  params      Json?
  level       FeatureAccessLevel
  email       String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime?
  createdBy   String?
  featureType FeatureAccessType?
  drcJob      String?
  drcOffice   String?
  groupId     String?
  group       Group?             @relation(fields: [groupId], references: [id])
}

model Group {
  id        String          @id @default(uuid())
  createdAt DateTime        @default(now())
  name      String          @unique
  desc      String?
  accesses  FeatureAccess[]
  items     GroupItem[]
}

model GroupItem {
  id        String             @id @default(uuid())
  createdAt DateTime           @default(now())
  drcJob    String?
  drcOffice String?
  email     String?
  level     FeatureAccessLevel
  groupId   String?
  group     Group?             @relation(fields: [groupId], references: [id])
}

model AccessToken {
  id        String   @id @default(uuid())
  createdBy DateTime @default(now())
  name      String
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Proxy {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now())
  createdBy String?
  name      String       @unique
  url       String
  disabled  Boolean?
  slug      String       @unique
  expireAt  DateTime?
  usage     ProxyUsage[]
}

model ProxyUsage {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  ipAddresses String[]
  proxyId     String
  proxy       Proxy    @relation(fields: [proxyId], references: [id])
}

model MealVerificationAnswers {
  id                 String                         @id @default(uuid())
  koboAnswerId       String
  mealVerificationId String
  status             MealVerificationAnswersStatus?
  koboAnswer         KoboAnswers                    @relation(fields: [koboAnswerId], references: [id], onDelete: Cascade)
  mealVerification   MealVerification               @relation(fields: [mealVerificationId], references: [id])
}

model MealVerification {
  id        String                    @id @default(uuid())
  activity  String
  createdAt DateTime                  @default(now())
  createdBy String
  name      String
  desc      String?
  filters   Json
  status    MealVerificationStatus?
  answers   MealVerificationAnswers[]
}

model JsonStore {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  updatedBy String
  key       String    @unique
  value     Json
}

model DatabaseView {
  id         String                 @id @default(uuid())
  name       String
  createdAt  DateTime               @default(now())
  updatedAt  DateTime?
  updatedBy  String?
  visibility DatabaseViewVisibility @default(Private)
  databaseId String
  createdBy  String?
  details    DatabaseViewCol[]

  @@unique([databaseId, name])
  @@index([name])
  @@index([databaseId])
}

model DatabaseViewCol {
  name       String
  viewId     String
  width      Int?
  visibility DatabaseViewColVisibility? @default(Visible)
  view       DatabaseView               @relation(fields: [viewId], references: [id], onDelete: Cascade)

  @@unique([name, viewId])
  @@index([name, viewId])
}

model EmailOutBox {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  createdBy   String?
  context     String
  to          String
  subject     String
  content     String?
  deliveredAt DateTime?
  cc          String?
  tags        Json?
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model workdoneat_backup {
  id           String?
  work_done_at String?

  @@ignore
}

enum Gender {
  Male
  Female
  Other
}

enum FeatureAccessLevel {
  Read
  Write
  Admin
}

enum FeatureAccessType {
  KoboForm
}

enum MealVerificationAnswersStatus {
  Selected
}

enum MealVerificationStatus {
  Approved
  Rejected
  Pending
}

enum DatabaseViewVisibility {
  Public
  Private
  Sealed
}

enum DatabaseViewColVisibility {
  Hidden
  Visible
}

enum Modality {
  Cash
  InKind
  Voucher
  Combination
}
